/**
 * @param {number[]} prices
 * @param {number} fee
 * @return {number}
 */
var maxProfit = function (prices, fee) {
  let buys = prices.map(x => 0), sells = prices.map(x => 0)
  buys[0] = -prices[0], sells[0] = 0
  for (let i = 1; i < prices.length; i++) {
    // if I buy today or keep bought
    buys[i] = Math.max(sells[i - 1] - prices[i], buys[i - 1])
    // if I sell today or keep sold
    sells[i] = Math.max(buys[i - 1] + prices[i] - fee, sells[i - 1])
  }
  return sells[prices.length - 1]
};

// console.log(maxProfit([1, 3, 2, 8, 4, 9], 2))

// console.log(maxProfit([73, 4151, 2222, 3765, 1590, 2791, 1025, 3789, 4948, 216, 4976, 2540, 2560, 4367, 2981, 4768, 3964, 3394, 2483, 709, 3188, 1860, 2223, 2988, 2158, 3353, 4200, 3001, 4875, 1706, 229, 919, 1209, 4372, 4097, 3766, 665, 4305, 1605, 4550, 3234, 126, 4518, 4820, 304, 2285, 2150, 2651, 3998, 159, 2893, 4256, 1877, 4493, 691, 668, 3133, 3760, 1308, 1236, 25, 800, 3867, 4690, 2506, 4144, 1305, 4230, 1131, 826, 4862, 1982, 4525, 399, 1820, 1721, 264, 1182, 4776, 2037, 1347, 2446, 4271, 2134, 4433, 2497, 4245, 4930, 745, 3375, 3557, 1162, 3980, 1874, 3662, 539, 4968, 4438, 4155, 3363, 969, 4075, 2253, 960, 2674, 2530, 4578, 1354, 3199, 423, 3629, 2655, 1327, 727, 3572, 638, 2586, 4952, 170, 1833, 2498, 2506, 868, 3618, 3203, 4276, 3030, 4549, 2179, 3376, 3163, 4732, 764, 4251, 3678, 625, 3647, 539, 3658, 2111, 1364, 1799, 1056, 1072, 1787, 448, 1105, 933, 221, 3195, 1443, 4896, 4964, 1024, 3245, 2528, 2643, 4006, 2370, 4954, 2225, 1031, 3636, 1181, 4358, 201, 4624, 460, 830, 3018, 4012, 4909, 3969, 1845, 4940, 1056, 433, 1262, 1200, 3715, 3547, 109, 4275, 531, 433, 3815, 1262, 1838, 4575, 3264, 256, 1638, 3991, 4452, 1446, 1079, 136, 4318, 2056, 3768, 1686, 1333, 4598, 4719, 244, 455, 3220, 4078, 3990, 131, 2203, 1889, 4155, 1329, 2509, 1021, 769, 1480, 2620, 534, 1285, 4549, 2802, 3985, 4641, 1138, 4112, 4320, 2219, 428, 4516, 79, 1436, 4549, 4985, 173, 2878, 3424, 3111, 61, 1389, 4656, 2847, 871, 1390, 3622, 2221, 733, 2556, 4540, 2657, 4625, 555, 3120, 4657, 2028, 791, 900, 2977, 1865, 3023, 1172, 63, 2559, 418, 2529, 3973, 4819, 3794, 3250, 2618, 2627, 4979, 2973, 703, 2987, 313, 3438, 4085, 1722, 4124, 1820, 3971, 2488, 266, 1548, 3267, 160, 273, 50, 2294, 3159, 1606, 3486, 4889, 1442, 4213, 3362, 2124, 2552, 1355, 392, 4611, 2383, 4542, 1511, 1205, 1049, 3905, 3370, 879, 4691, 1872, 4068, 2873, 1915, 3586, 833, 1195, 3468, 2315, 4872, 4658, 743, 4996, 3076, 4698, 898, 14, 4745, 4113, 4179, 1076, 1828, 4127, 544, 914, 3682, 1917, 3090, 1346, 3685, 2101, 1306, 1933, 1648, 4332, 1263, 353, 443, 1581, 4615, 4589, 2913, 1868, 338, 4791, 1751, 2107, 227, 2978, 1840, 2951, 2227, 2539, 1831, 4853, 2945, 671, 3548, 76, 3046, 4424, 3034, 1798, 4981, 2545, 3821, 2309, 406, 3257, 4813, 3557, 81, 1012, 4601, 1361, 4126, 2585, 4413, 3395, 3747, 1998, 3174, 2710, 2784, 4783, 2912, 1331, 2216, 124, 4394, 1374, 575, 2630, 2650, 156, 4150, 1795, 4077, 459, 2935, 1474, 4687, 4774, 4072, 117, 3412, 3501, 4529, 4800, 2892, 4119, 3261, 3745, 3623, 175, 1568, 4773, 3889, 973, 1558, 3320, 4108, 1446, 3236, 685, 255, 1714, 843, 769, 1214, 1339, 1421, 4618, 2537, 1617, 1231, 1439, 1718, 1500, 1511, 4322, 4130, 1994, 2451, 2866, 4364, 192, 4568, 1171, 3161, 1272, 2670, 255, 3463, 3818, 2584, 204, 3746, 2510, 4303, 1829, 961, 3405, 4814, 3848, 1520, 2862, 4849, 1734, 4867, 1123, 2378, 3744, 1885, 1096, 4556, 3896, 3264, 3411, 3872, 1727, 4931, 4428, 1924, 2225, 350, 3273, 3206, 2488, 3891, 3611, 886, 4971, 3652, 3160, 4870, 1292, 2742, 4651, 4674, 3156, 4927, 3983, 2240, 4815, 555, 522, 248, 351, 2680, 4626, 2325, 4376, 3731, 4320, 4222, 2255, 3529, 4918, 416, 4132, 1078, 3566, 4163, 2656, 411, 4985, 3355, 4738, 2168, 1832, 3152, 2762, 204, 2345, 3751, 904, 2160, 1789, 3290, 1875, 4018, 774, 643, 2824, 1239, 773, 569, 4154, 183, 2917, 3835, 348, 1483, 150, 3763, 3214, 1484, 4412, 4741, 362, 2094, 4723, 2046, 2512, 1099, 4627, 3386, 225, 177, 4545, 209, 2617, 1029, 3356, 3713, 3590, 3137, 935, 4876, 3601, 4859, 4255, 4092, 2192, 4341, 4382, 4259, 3628, 4818, 2893, 1742, 2974, 998, 298, 374, 3473, 1639, 4228, 194, 2712, 3524, 2987, 2972, 3429, 4393, 3198, 3635, 4542, 2318, 1038, 2282, 3553, 1490, 4936, 2976, 4326, 3250, 1424, 4758, 852, 2129, 3931, 3596, 4944, 4307, 4402, 3209, 3303, 2023, 3199, 4869, 730, 4722, 3054, 1289, 2896, 1249, 580, 1402, 2171, 3630, 4715, 1274, 2209, 178, 2545, 3900, 2280, 1840, 2814, 3726, 4280, 19, 3759, 2103, 3923, 3977, 4546, 218, 1869, 246, 1137, 1794, 364, 2911, 3934, 4902, 1726, 4135, 4866, 2844, 4283, 899, 3086, 428, 3258, 2585, 2443, 4672, 2058, 2534, 1905, 1310, 1376, 878, 2660, 3936, 1228, 1801, 1013, 2657, 4108, 4048, 4745, 4964, 580, 190, 2001, 4099, 595, 4568, 2918, 2286, 3954, 1381, 3357, 4289, 2728, 767, 2158, 4787, 2656, 4018, 352, 414, 1065, 595, 2730, 4941, 973, 676, 2739, 2902, 3256, 310, 2713, 4645, 1236, 2426, 4253, 4354, 3690, 1913, 742, 3463, 1511, 1347, 4993, 3110, 3421, 3531, 2850, 2259, 175, 993, 1640, 1496, 109, 4209, 4249, 1039, 3280, 2682, 2238, 3251, 2151, 713, 1559, 1874, 1394, 3155, 4042, 1034, 3600, 1611, 3581, 3850, 329, 3429, 1869, 1813, 427, 4024, 202, 3074, 1472, 1779, 3400, 4650, 1555, 3780, 870, 1843, 936, 2270, 3003, 2784, 3550, 4561, 1866, 3433, 585, 2127, 394, 3651, 428, 3346, 4878, 1954, 4628, 1559, 2753, 3420, 3644, 3274, 4041, 1361, 1847, 4705, 1987, 1617, 4558, 2042, 2765, 4457, 1998, 1144, 2520, 4967, 14, 2713, 3863, 1188, 91, 2360, 3314, 269, 2990, 1267, 3446, 1010, 2025, 206, 234, 2370, 296, 567, 4111, 777, 466, 1098, 2600, 2074, 4812, 1659, 2173, 1120, 1109, 1248, 4985, 262, 2966, 3011, 4234, 134, 1702, 1706, 2464, 1700, 656, 2912, 3257, 4627, 3629, 2022, 3274, 2642, 3890, 1660, 973, 2105, 2235, 4175, 3618, 3220, 944, 503, 3006, 4088, 4228, 3662, 781, 4354, 951, 3573, 1430, 3711, 4420, 2757, 2945, 517, 3215, 1802, 4010, 800, 3984, 1121, 1344, 97, 1842, 3331, 1545, 538, 1315, 3462, 1194, 2016, 782, 3309, 1165, 118, 2077, 388, 3977, 2500, 4800, 2236, 2203, 2054, 4894, 1954, 525, 816, 4313, 55, 1111, 2758, 4267, 1491, 1898, 235, 2450, 4699, 4653, 612, 824, 830, 2932, 1210, 2368, 4314, 891, 911, 976, 2027, 3850, 228, 2960, 4360, 2705, 66, 124, 18, 3421, 1716, 350, 1592, 1203, 3805, 2198, 4616, 3571, 2440, 914, 2001, 3338, 3636, 2718, 3472, 2217, 4204, 108, 639, 1884, 4892, 4056, 4215, 3384, 3589, 4010, 4862, 779, 3582, 3979, 516, 4365, 1302], 1550))

// /**
//  * @param {number[]} prices
//  * @param {number} fee
//  * @return {number}
//  */
// var maxProfit = function (prices, fee) {
//   let cache = []
//   let rtn = memoMax()
//   return rtn

//   function max(start = 0, end = prices.length - 1, maxAlternative) {
//     let rtn = 0
//     if (start == end) return 0
//     rtn = Math.max(rtn, prices[end] - prices[start] - fee)
//     for (let i = 0; i < end - start; i++) {
//       rtn = Math.max(rtn,
//         maxAlternative(start, start + i) + maxAlternative(start + i + 1, end))
//     }
//     return rtn
//   }

//   function memoMax(start = 0, end = prices.length - 1) {
//     if (undefined === cache[start]) cache[start] = []
//     if (undefined !== cache[start][end]) return cache[start][end]
//     cache[start][end] = max(start, end, memoMax)
//     return cache[start][end]
//   }

// };

// /**
//  * @param {number[]} prices
//  * @param {number} fee
//  * @return {number}
//  */
// var maxProfit = function (prices, fee) {
//   console.time('t1')
//   let cache = prices.map(x => prices.map(y => 0))
//   console.timeEnd('t1')
//   console.time('t2')
//   for (let length = 1; length < prices.length; length++) {
//     for (let start = 0; start < prices.length - length; start++) {
//       let t = Math.max(0, prices[start + length] - prices[start] - fee)
//       for (let sublen = 0; sublen < length; sublen++) {
//         t = Math.max(t, cache[start][start + sublen] + cache[start + sublen + 1][start + length])
//       }
//       cache[start][start + length] = t
//     }
//   }

//   console.timeEnd('t2')
//   return cache[0][prices.length - 1]
// };