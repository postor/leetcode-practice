/**
 * @param {number[]} nums
 * @return {number}
 */
var maximumGap = function(nums) {
    
};

// 输入 [3,6,9,1]
// 最大值 9，最小值 1
// 最大桶 [-∞,-∞,-∞] 注意是反的，长度比原数组少1
// 最小桶 [+∞,+∞,+∞,+∞] 注意是反的，长度比原数组少1
// 平均桶间距 (9-1)/4 = 2
// 把值逐个放到桶 (nums[i]-最小值)/平均间距
// (3 - 1)/2 = 1 ，修改最小桶坐标1为3， [+∞,3,+∞]，同理最大桶 [-∞,3,-∞]
// (6 - 1)/2 = 2.5 = 2， 最小桶 [+∞,3,6] 最大桶 [-∞,3,6]
// 9 为最大值，跳过
// 1 为最小值，跳过
// 如果有落在同一个桶的则最大桶取最大值，最小桶取最小值，此例子中没有重复落入情况
// 从最小桶找到间隔最大的坐标 最小值=1，最小桶 [+∞,3,6]，最大桶[-∞,3,6] 最大值=9
// 即较大间隔有3段，1-3(最小桶)，3(最大桶)-6(最小桶)，6(最大桶)-9
// 间隔 2,3,3 取最大 3

